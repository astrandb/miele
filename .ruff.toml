# The contents of this file is based on https://github.com/home-assistant/core/blob/dev/pyproject.toml

target-version = "py313"

lint.select = [
    "B002",   # Python does not support the unary prefix increment
    "B005",   # Using .strip() with multi-character strings is misleading
    "B007",   # Loop control variable {name} not used within loop body
    "B014",   # Exception handler with duplicate exception
    "B015",   # Pointless comparison. Did you mean to assign a value? Otherwise, prepend assert or remove it.
    "B018",   # Found useless attribute access. Either assign it to a variable or remove it.
    "B023",   # Function definition does not bind loop variable {name}
    "B026",   # Star-arg unpacking after a keyword argument is strongly discouraged
    "B032",   # Possible unintentional type annotation (using :). Did you mean to assign (using =)?
    "B904",   # Use raise from to specify exception cause
    "C",      # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D",      # docstrings
    "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E",      # pycodestyle
    "F",      # pyflakes/autoflake
    "G",      # flake8-logging-format
    "I",      # isort
    "ISC",    # flake8-implicit-str-concat
    "ICN001", # import concentions; {name} should be imported as {asname}
    "LOG",    # flake8-logging
    "N804",   # First argument of a class method should be named cls
    "N805",   # First argument of a method should be named self
    "N815",   # Variable {name} in class scope should not be mixedCase
    "PERF",   # Perflint
    "PGH004", # Use specific rule codes when using noqa
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "RSE",    # flake8-raise
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    # "RUF100", # Unused `noqa` directive; temporarily every now and then to clean them up
    "S102",   # Use of exec detected
    "S103",   # bad-file-permissions
    "S108",   # hardcoded-temp-file
    "S306",   # suspicious-mktemp-usage
    "S307",   # suspicious-eval-usage
    "S313",   # suspicious-xmlc-element-tree-usage
    "S314",   # suspicious-xml-element-tree-usage
    "S315",   # suspicious-xml-expat-reader-usage
    "S316",   # suspicious-xml-expat-builder-usage
    "S317",   # suspicious-xml-sax-usage
    "S318",   # suspicious-xml-mini-dom-usage
    "S319",   # suspicious-xml-pull-dom-usage
    "S601",   # paramiko-call
    "S602",   # subprocess-popen-with-shell-equals-true
    "S604",   # call-with-shell-equals-true
    "S608",   # hardcoded-sql-expression
    "S609",   # unix-command-wildcard-injection
    "SIM",    # flake8-simplify
    "T100",   # Trace found: {name} used
    "T20",    # flake8-print
    "TID251", # Banned imports
    "TRY004", # Prefer TypeError exception for invalid type
    "TRY203", # Remove exception handler; error is immediately re-raised
    "UP",     # pyupgrade
    "W",      # pycodestyle
]

lint.ignore = [
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D406", # Section name should end with a newline
    "D407", # Section name underlining
    "E501", # line too long
    "E731", # do not assign a lambda expression, use a def

    "PLC1901", # {existing} can be simplified to {replacement} as an empty string is falsey; too many false positives
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "SIM102",  # Use a single if statement instead of nested if statements
    "SIM108",  # Use ternary operator {contents} instead of if-else-block
    "SIM115",  # Use context handler for opening files
    "UP006",   # keep type annotation style as is
    "UP007",   # keep type annotation style as is
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",

    # Disabled because ruff does not understand type of __all__ generated by a function
    "PLE0605",

    # temporarily disabled
    "PT007",
    "PT011",
    "PT018",
    "PT012",
    "PT023",
    "PT019",
]

[lint.flake8-import-conventions.extend-aliases]
voluptuous = "vol"
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.category_registry" = "cr"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.floor_registry" = "fr"
"homeassistant.helpers.issue_registry" = "ir"
"homeassistant.helpers.label_registry" = "lr"
"homeassistant.util.dt" = "dt_util"

[lint.isort]
force-sort-within-sections = true
known-first-party = ["homeassistant"]
combine-as-imports = true

[lint.flake8-pytest-style]
fixture-parentheses = false

[lint.mccabe]
max-complexity = 25
